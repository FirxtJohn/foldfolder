import os
import random
import click
from tqdm import tqdm

FILE_EXTENSIONS = [
    ".txt",
    ".pdf",
    ".docx",
    ".xlsx",
    ".pptx",
    ".jpg",
    ".png",
    ".gif",
    ".mp3",
    ".mp4",
    ".avi",
    ".mov",
    ".zip",
    ".rar",
    ".7z",
    ".tar",
    ".gz",
    ".bz2",
    ".html",
    ".css",
    ".js",
    ".php",
    ".py",
    ".cpp",
    ".java",
    ".c",
    ".h",
    ".csv",
    ".json",
    ".xml",
    ".yaml",
    ".ini",
    ".cfg",
    ".log",
    ".bak",
    ".tmp",
    ".exe",
    ".dll",
    ".bat",
    ".sh",
    ".ps1",
    ".svg",
    ".ai",
    ".psd",
    ".indd",
    ".odt",
    ".ods",
    ".odp",
    ".rtf",
    ".tex",
    ".db",
    ".sql",
    ".mdb",
    ".accdb",
    ".torrent",
    ".iso",
    ".img",
    ".vmdk",
    ".vdi",
    ".ova",
    ".ovf",
    ".apk",
    ".ipa",
    ".jar",
    ".war",
    ".ear",
    ".dll",
    ".so",
    ".dylib",
    ".obj",
    ".o",
    ".a",
    ".lib",
    ".pdb",
    ".map",
    ".elf",
    ".bin",
    ".hex",
    ".srec",
    ".mot",
    ".hex",
    ".asm",
    ".swift",
    ".kt",
    ".rs",
    ".go",
    ".rb",
    ".dart",
    ".ts",
    ".jsx",
    ".vue",
    ".unity",
    ".blend",
    ".max",
    ".fbx",
    ".obj",
    ".mtl",
    ".stl",
    ".iges",
    ".step",
    ".dwg",
    ".dxf",
    ".gcode",
    ".nc",
    ".stl",
    ".obj",
    ".ply",
    ".off",
    ".pcd",
    ".las",
    ".xyz",
    ".tif",
    ".tiff",
    ".bmp",
    ".ico",
    ".webp",
    ".heic",
    ".heif",
    ".cr2",
    ".nef",
    ".orf",
    ".rw2",
    ".dng",
    ".arw",
    ".mkv",
    ".flv",
    ".webm",
    ".wmv",
    ".rm",
    ".rmvb",
    ".ogv",
    ".ogg",
    ".flac",
    ".aac",
    ".wma",
    ".m4a",
    ".mid",
    ".midi",
    ".wav",
    ".aif",
    ".aiff",
    ".au",
    ".snd",
    ".raw",
    ".pcm",
    ".yuv",
    ".rgb",
    ".rgba",
    ".cmyk",
    ".hsv",
    ".hsl",
    ".xyz",
    ".lab",
    ".lch",
    ".lut",
    ".cube",
    ".3dl",
    ".cdl",
    ".icc",
    ".icm",
    ".pfm",
    ".hdr",
    ".exr",
    ".tga",
    ".sgi",
    ".iff",
    ".pict",
    ".pct",
    ".emf",
    ".wmf",
    ".eps",
    ".ai",
    ".cdr",
    ".svgz",
    ".xml",
    ".xsd",
    ".dtd",
    ".rss",
    ".atom",
    ".kml",
    ".geojson",
    ".shp",
    ".dbf",
    ".prj",
    ".shx",
    ".sbx",
    ".sbn",
    ".ai",
    ".ps",
    ".indd",
    ".xd",
    ".sketch",
    ".fig",
    ".pdf",
    ".epub",
    ".mobi",
    ".azw3",
    ".djvu",
    ".fb2",
    ".cbz",
    ".cbr",
    ".tar.gz",
    ".tar.bz2",
    ".tar.xz",
    ".tgz",
    ".tbz2",
    ".txz",
    ".deb",
    ".rpm",
    ".msi",
    ".dmg",
    ".pkg",
    ".apk",
    ".ipa",
    ".xapk",
    ".aab",
    ".xcarchive",
    ".ipa",
    ".app",
    ".framework",
    ".bundle",
    ".plugin",
    ".kext",
    ".drv",
    ".sys",
    ".inf",
    ".reg",
    ".vbs",
    ".vba",
    ".wsf",
    ".wsh",
    ".psm1",
    ".psd1",
    ".pssc",
    ".psrc",
    ".xaml",
    ".csproj",
    ".sln",
    ".vbproj",
    ".vcxproj",
    ".rc",
    ".ico",
    ".cur",
    ".ani",
    ".ttf",
    ".otf",
    ".woff",
    ".woff2",
    ".eot",
    ".fon",
    ".fnt",
    ".bdf",
    ".pcf",
    ".snf",
    ".pfa",
    ".pfb",
    ".afm",
    ".inf",
    ".cat",
    ".cer",
    ".crt",
    ".pem",
    ".key",
    ".pfx",
    ".p12",
    ".jks",
    ".keystore",
    ".truststore",
    ".config",
    ".properties",
    ".json",
    ".yaml",
    ".toml",
    ".ini",
    ".cfg",
    ".conf",
    ".htaccess",
    ".htpasswd",
    ".gitignore",
    ".gitattributes",
    ".gitmodules",
    ".dockerignore",
    ".dockerfile",
    ".env",
    ".lock",
    ".md",
    ".rst",
    ".adoc",
    ".asciidoc",
    ".wiki",
    ".mediawiki",
    ".textile",
    ".rtf",
    ".tex",
    ".latex",
    ".bib",
    ".bst",
    ".sty",
    ".cls",
    ".dtx",
    ".ins",
    ".log",
    ".out",
    ".aux",
    ".bbl",
    ".blg",
    ".pdf",
    ".ps",
    ".dvi",
    ".eps",
    ".svg",
    ".png",
    ".jpg",
    ".jpeg",
    ".gif",
    ".bmp",
    ".tiff",
    ".tif",
    ".webp",
    ".heic",
    ".heif",
    ".raw",
    ".cr2",
    ".nef",
    ".orf",
    ".rw2",
    ".dng",
    ".arw",
    ".sr2",
    ".srf",
    ".mef",
    ".mrw",
    ".pef",
    ".x3f",
    ".nrw",
    ".kdc",
    ".mos",
    ".dcs",
    ".drf",
    ".ptx",
    ".iiq",
    ".erf",
    ".3fr",
    ".mdc",
    ".fff",
    ".bay",
    ".bmq",
    ".cap",
    ".data",
    ".dat",
    ".bin",
    ".hex",
    ".srec",
    ".mot",
    ".eep",
    ".rom",
    ".img",
    ".iso",
    ".dmg",
    ".vmdk",
    ".vdi",
    ".vhdx",
    ".ova",
    ".ovf",
    ".qcow2",
    ".raw",
    ".vhd",
    ".sparseimage",
    ".sparsebundle",
    ".dmgpart",
    ".iso.part",
    ".part",
    ".crdownload",
    ".download",
    ".partial",
    ".temp",
    ".tmp",
    ".swp",
    ".swo",
    ".bak",
    ".old",
    ".orig",
    ".backup",
    ".save",
    ".cache",
    ".lock",
    ".idx",
    ".log",
    ".err",
    ".out",
    ".trace",
    ".dump",
    ".crash",
    ".stackdump",
    ".prof",
    ".gmon",
    ".gcda",
    ".gcno",
    ".lst",
    ".map",
    ".sym",
    ".pdb",
    ".idb",
    ".ilk",
    ".exp",
    ".lib",
    ".dll",
    ".so",
    ".dylib",
    ".a",
    ".obj",
    ".o",
    ".exe",
    ".msi",
    ".msp",
    ".cab",
    ".zip",
    ".rar",
    ".7z",
    ".tar",
    ".gz",
    ".bz2",
    ".xz",
    ".lzma",
    ".lzo",
    ".zst",
]

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"], max_content_width=120)

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "--folder",
    prompt="Enter the folder name to store files",
    type=click.Path(),
    help="The name of the folder.",
)
@click.option(
    "--num-files",
    prompt="Enter the number of files to generate",
    type=int,
    help="Number of files to create.",
)
@click.option(
    "--num-extensions",
    prompt="Enter the number of extensions to choose from",
    type=int,
    help="Number of extensions to use.",
)
def generate_files(folder, num_files, num_extensions):
    """Generates empty files with random extensions."""

    if num_extensions > len(FILE_EXTENSIONS):
        click.echo(
            click.style(
                f"Error: Number of extensions requested ({num_extensions}) exceeds the available extensions ({len(FILE_EXTENSIONS)}). Using all available extensions.",
                fg="red",
            )
        )
        num_extensions = len(FILE_EXTENSIONS)

    try:
        os.makedirs(folder, exist_ok=True)  # Create the folder if it doesn't exist
    except OSError as e:
        click.echo(click.style(f"Error creating folder: {e}", fg="red"))
        return

    chosen_extensions = random.sample(FILE_EXTENSIONS, num_extensions)

    for i in tqdm(range(num_files), desc="Creating files", colour="green"):
        extension = random.choice(chosen_extensions)
        filename = f"file_{i+1}{extension}"
        filepath = os.path.join(folder, filename)
        try:
            with open(filepath, "w", encoding="utf-8"):  # Create an empty file
                pass
        except OSError as e:
            click.echo(click.style(f"Error creating file {filename}: {e}", fg="red"))

    click.echo(
        click.style(
            f"{num_files} files created with {num_extensions} extensions.", fg="green"
        )
    )


if __name__ == "__main__":
    generate_files()
